#!/usr/bin/env python3

import json
import os
import base64
import PIL.Image
import io
import sys

# To create files:
# go to https://www.piskelapp.com/p/create/sprite/ , set canvas size to 16x16 or load .piskel file
# keep background color as transparent, but set foreground to white (#ffffff)
# edit
# save file as piskel
# mv ~/Downloads/step_set-*.piskel src/step_set.piskel
# mv ~/Downloads/MiscIcons-*.piskel src/misc_icons.piskel

SIZE = 16

def load_piskel(name):
    with open(name, 'r') as f:
        outer = json.load(f)
    assert outer['modelVersion'] == 2
    assert outer['piskel']['height'] == SIZE
    assert outer['piskel']['width'] == SIZE
    layers = outer['piskel']['layers']
    assert len(layers) == 1
    layer = json.loads(layers[0])
    frames = layer['frameCount']
    assert len(layer['chunks']) == 1
    chunk = layer['chunks'][0]
    assert chunk['layout'] == [[x] for x in range(frames)]
    png_str = chunk['base64PNG']
    assert png_str.startswith('data:image/png;base64,')
    png_bin = base64.b64decode(png_str.split(',', 1)[1])

    img = PIL.Image.open(io.BytesIO(png_bin))
    assert img.width == (frames * SIZE)
    assert img.height == SIZE

    colors = [color for _, color in img.getcolors()]  # ignore popcount, only look at colors
    colors.sort()
    # Only accept 2-color images
    assert colors == [(0, 0, 0, 0), (255, 255, 255, 255)], colors

    # Return a list of 16-bit ints, one per row, LSB in col 0
    result = []
    for f in range(frames):
        result.append([])
        for row in range(SIZE):
            result[-1].append(sum(
                (1 << col) if img.getpixel((col + SIZE*f, row))[0] else 0
                for col in range(SIZE)))
    return result

def print_frame(fint, prefix='', f_out=sys.stdout):
    print(prefix + '+' + '-' * 2*SIZE + '+', file=f_out)
    for row in range(SIZE):
        print(prefix + '|' + ''.join(
            '()' if ((fint[row] >> col) & 1) else '  '
            for col in range(SIZE)) + '|', file=f_out)
    print(prefix + '+' + '-' * 2*SIZE + '+', file=f_out)

def generate_code(data, c_out, var_name):
    print(file=c_out)
    frames = len(data)
    print(f'#define {var_name}_COUNT {frames}', file=c_out)
    print(f'uint{SIZE}_t {var_name}[{var_name}_COUNT][{SIZE}] = ' + '{', file=c_out)
    for frame_num, frame in enumerate(data):
        print(f'  // {var_name}[{frame_num}]', file=c_out)
        print('  {' + ', '.join('0x%04X' % x for x in frame) + '},', file=c_out)
        print_frame(frame, prefix='  // ', f_out=c_out)
    print('};\n\n', file=c_out)


def main():
    c_out = io.StringIO()
    print(f'''
// THIS FILE IS AUTOGENERATED
// DO NOT EDIT, INSTEAD USE:
//  src/make_images.py
//
static_assert(DISP_WIDTH == {SIZE});
static_assert(DISP_HEIGHT == {SIZE});
''', file=c_out)

    data = load_piskel("src/step_set.piskel")
    generate_code(data, c_out, 'StepSet')

    data = load_piskel("src/misc_icons.piskel")
    generate_code(data, c_out, 'MiscIcons')

    print('// file end', file=c_out)

    # only write if no assertions failed
    with open('src/generated_images.inc', 'w') as f:
        f.write(c_out.getvalue())
    print('updated file')

if __name__ == '__main__':
    main()
